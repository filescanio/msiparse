Reverse Engineering MSI Files for Malware Analysis
1. Introduction to MSI Files and Malware Analysis
The Microsoft Installer (MSI) file format serves as a foundational technology for the installation, maintenance, and removal of software on Windows operating systems 1. These files are structured as relational databases, meticulously organizing all the necessary components and instructions for a software deployment 1. This design encapsulates the complete installation logic, including the application files themselves and the precise sequence of steps required for their proper integration into the system, within a single package 1. The MSI format employs a standardized set of tables to delineate various aspects of the installation, such as the files to be installed, modifications to the system registry, and any custom actions to be performed 1. Furthermore, MSI packages can incorporate external data files, commonly in the form of Cabinet (CAB) archives, which often contain the bulk of the application's files 2.
The database-driven architecture of MSI files presents a structured landscape for analysis; however, this very structure can be exploited by malicious actors to conceal harmful software within seemingly legitimate packages 1. Unlike traditional executable installers where the logic might be more directly embedded in code, MSI files store installation procedures as data within interconnected tables. This necessitates a comprehensive understanding of the MSI schema and the relationships between these tables to accurately decipher the installer's intended actions, thereby creating opportunities for malware to subtly manipulate these data structures to nefarious ends. Moreover, the capability to include external files or embedded streams, such as CAB archives or binary data stored within the MSI file itself, implies that the malicious payload might not reside directly within the database tables. Instead, malware authors can leverage the Binary table to embed malicious executables, scripts, or Dynamic Link Libraries (DLLs), or they might include a CAB file containing the malware, which is subsequently extracted and executed through custom actions defined within the MSI tables 1. Therefore, a thorough analysis of an MSI file requires not only an examination of its tables but also a careful scrutiny of any associated embedded resources.
The inherent capabilities of MSI files to execute code and modify the system state during the installation process make them a potent vector for malware distribution 1. This power, intended for the seamless deployment of legitimate software, can be readily repurposed by malicious actors to introduce harmful software onto unsuspecting users' systems. Threat actors frequently disguise their malicious MSI packages as legitimate software installers or updates for widely used applications, employing social engineering tactics to deceive users into initiating the installation process 1. The .msi file extension itself can appear less alarming to users compared to traditional executable extensions like .exe, potentially enabling malicious MSI files to bypass basic security awareness or file extension-based filters 12. Furthermore, MSI installations are typically handled by the legitimate Windows Installer service (msiexec.exe), a trusted system component, which can sometimes lead to malicious activities being overlooked by security products that might primarily focus on monitoring untrusted processes 1. The familiar installation wizard interface often associated with MSI files can further reinforce a user's perception of safety, making them more likely to execute a malicious MSI package. The fact that msiexec.exe is a core Windows process used for legitimate software installations means that its mere presence in system logs or process lists does not automatically trigger suspicion. Malware executed through custom actions within an MSI file run by msiexec.exe can therefore operate with a degree of camouflage, potentially evading detection by basic process monitoring techniques.
This report aims to provide a comprehensive methodology for correlating data across the diverse tables within an MSI file to reconstruct the precise, step-by-step actions undertaken by an installer. A particular emphasis will be placed on the analysis of the InstallExecuteSequence and AdminExecuteSequence tables to meticulously understand the order in which CustomAction lines are executed. The report will also delve into how these actions ultimately manifest as changes to the target system, focusing on modifications to files, the initiation and termination of processes, and alterations to the Windows Registry. Furthermore, it will equip malware analysts with practical methods for parsing the information contained within these tables to gain a granular understanding of the installer's behavior. Finally, the report will explore various real-world use cases where this in-depth analytical approach can be effectively applied to detect and comprehend malicious activities carried out by malware distributed through the MSI file format.
2. MSI File Structure and Key Tables for Malware Analysis
MSI files are fundamentally structured as relational databases, often implemented as COM structured storage, and are logically organized into features and components 2. Features represent logical groupings of application functionalities that a user can choose to install, while components are the foundational units that encapsulate the actual resources, such as files, registry entries, and shortcuts 5. The numerous tables within the MSI database are interconnected through primary and foreign key relationships 1. This relational model ensures data consistency and enables the Windows Installer to efficiently manage the complex process of software installation, maintenance, and removal. For malware analysis, a thorough understanding of these inter-table relationships is of paramount importance, as malicious activities often involve subtle manipulations of these connections 1. The power of the MSI format lies in its ability to define intricate installation procedures by distributing information across numerous linked tables. For instance, the installation of a single file might involve entries in the File, Component, and Directory tables, each providing a specific piece of information required for the installation process. To fully comprehend the installer's intent, particularly when scrutinizing it for malicious behavior, analysts must be adept at navigating these relationships and synthesizing information from various tables to form a complete picture of the installer's actions.
Several key tables within the MSI database are particularly relevant for malware analysis. These tables provide critical information about the installer's intended actions and the potential impact on the target system.








Column
	Type
	Key
	Nullable
	Description
	Relevance to Malware Analysis
	Action
	Identifier
	Y
	N
	Name of the action to execute (built-in or custom).
	Identifies potentially malicious custom actions or unusual sequences of standard actions.
	Condition
	Condition
	N
	Y
	Boolean expression determining if the action is executed.
	Malware can use conditions to hide execution based on specific system states.
	Sequence
	Integer
	N
	Y
	Numerical order in which the action is executed.
	Crucial for understanding the installation flow and the timing of custom actions.
	The InstallExecuteSequence and AdminExecuteSequence tables are central to controlling the order of installation actions 1. These tables dictate the exact sequence in which both standard Windows Installer actions and custom actions are performed when the top-level INSTALL or ADMIN action is initiated. For malware analysts, examining these tables is essential to trace the execution of potentially malicious custom actions embedded within the installation process 1. The Action column specifies the name of the action to be performed, which can be a built-in action like InstallFiles or WriteRegistryValues, or a custom action defined in the CustomAction table 14. The Condition column contains a conditional expression that determines whether the associated action will be executed 1. Malware can exploit this to ensure its actions only run under specific circumstances, potentially evading detection in generic analysis environments 14. The Sequence column provides a numerical value indicating the order in which actions are executed 1. Actions are processed in ascending order of their sequence number, making this column critical for understanding the flow of the installation and identifying when potentially malicious custom actions are invoked relative to standard installation procedures 1. The AdminExecuteSequence table specifically governs the actions performed during an administrative installation, which is often used for network deployments 1. Malware might include specific actions within this sequence to compromise systems during administrative deployments, which often involve elevated privileges. Analyzing the InstallExecuteSequence table is therefore paramount to understanding the intended execution flow of the installer, and any deviations from typical sequences or the presence of unusual actions should be considered strong indicators of potential malicious intent 1.








Column
	Type
	Key
	Nullable
	Description
	Relevance to Malware Analysis
	Action
	Identifier
	Y
	N
	Unique identifier for the custom action.
	Used to reference the custom action in sequence tables.
	Type
	Integer
	N
	N
	Specifies the type of custom action and execution options.
	Crucial for determining the nature and potential impact of the custom action. Specific types (e.g., execute binary, run script) are often abused by malware.
	Source
	CustomSource
	N
	Y
	Location of the code or data to be executed (e.g., Binary table key, File table key).
	Indicates where the custom action's payload originates.
	Target
	Formatted
	N
	Y
	Execution parameter depending on the Type (e.g., DLL entry point, command-line arguments, script code).
	Can contain malicious commands or embedded scripts.
	The CustomAction table provides the means to integrate custom code and data into the installation process 1. This flexibility, while intended for extending the functionality of legitimate installers, makes the CustomAction table a prime target for malware abuse 1. The Action column contains the unique identifier for the custom action, which is referenced in the sequence tables 24. The Type column is an integer field representing a set of bit flags that specify the basic type of custom action (e.g., calling a DLL, running an executable, executing a script, setting a property) and various execution options 1. Understanding the type is crucial for determining the nature and potential impact of the custom action 1. The Source column specifies the location of the code or data that the custom action will use, such as a key to the Binary table for embedded binaries or a key to the File table for installed files 1. The Target column provides additional information required by the custom action, such as the entry point for a DLL, command-line arguments for an executable, or the script code itself 1. Analysts must scrutinize the Type, Source, and Target columns for suspicious configurations, as malware often uses custom actions to drop and execute payloads, modify system settings, or establish persistence 1. The Type column's bit flags allow for various execution options, such as continuing on failure or deferred execution, which malware can leverage to make analysis more difficult or ensure execution even if errors occur 30. The Target column can even contain entire scripts or commands, making its careful examination essential 1.
The File table contains a comprehensive list of all the source files that the installer will deploy to the target system, along with their associated attributes 1. Key columns include File (unique identifier), Component (foreign key to the Component table), FileName, FileSize, Version, Language, and Attributes 1. Analyzing this table can reveal files dropped by the installer, and suspicious filenames, unusual file sizes, or files being installed to unexpected locations (when correlated with the Directory table) can indicate malware 8. The Component column links files to specific components, and if a component seems out of place or contains an unusual number of executable files, it might warrant further investigation 6.
The Directory table defines the hierarchical directory structure that the installer will create on the target system 1. Key columns are Directory (unique identifier), Directory_Parent (foreign key to the parent directory), and DefaultDir (default path). Malware might create directories in unusual or hidden locations to conceal its files 9.
The Binary table stores binary data directly within the MSI database, such as icons, custom action scripts, and embedded executables 1. Key columns are Name (unique identifier) and Data (the binary data). This table is a common storage location for malicious scripts or executables that are later executed by CustomAction entries 1.
The Registry table describes the registry data to be written by the installer 1. Key columns include Registry (unique identifier), Root (registry root key), Key (subkey path), Name (value name), and Value (data). Malware often uses this table to establish persistence or modify security settings 1.
The ServiceInstall table lists services to be installed and configured 1. Key columns include ServiceInstall (unique identifier), Name, DisplayName, ServiceType, StartType, ErrorControl, LoadOrderGroup, Dependencies, StartName, Password, and Arguments 35. Malware can install malicious services that run in the background with elevated privileges 9.
The Component table lists installation components, each managing a set of resources, with key columns like Component, ComponentId, Directory, Attributes, and KeyPath 3. The FeatureComponents table defines the relationship between features and components, with key columns Feature and Component 1. While not directly malicious, these tables define the application's logical structure, and manipulations can indicate malicious intent 5. The KeyPath in the Component table is crucial as it points to a critical resource; an unusual key path might be suspicious 5.
The Property table defines installer properties used during the installation 3, with key columns Property and Value 36. Malware can misuse properties to control the installation flow or set malicious installation paths 9.
3. Correlating MSI Tables for Step-by-Step Installer Reconstruction
A fundamental aspect of MSI analysis for malware involves understanding the intricate web of relationships between the various tables within the database 1. These connections, established through primary and foreign key relationships, are what enable the Windows Installer to manage the installation process coherently. For analysts, tracing these links provides the means to reconstruct the installer's intended actions and identify any deviations that might indicate malicious behavior. For instance, the FeatureComponents table uses the Feature column to reference the Feature table, thereby linking a logical feature to its definition. Similarly, the Component column in FeatureComponents references the Component table, connecting features to the specific components they comprise. The File table's Component column then links individual files to the components that manage their installation. Crucially, the Action column in the InstallExecuteSequence table can reference the Action column in the CustomAction table, indicating which custom actions are executed during the installation sequence 1.
Tracing these relationships is essential for understanding the installer's overall behavior. For example, to determine which files are installed as part of a specific application feature, an analyst would first consult the FeatureComponents table to identify the components associated with that feature. Subsequently, they would refer to the File table to list the files belonging to those identified components. This ability to navigate the database structure through foreign key relationships is key to piecing together a comprehensive understanding of the installer's actions.
Consider the practical example of tracing a CustomAction. An analyst might begin by examining the CustomAction table for any entries that appear suspicious based on their name or Type 1. Once a CustomAction entry is selected, the analyst would note the values in its Type, Source, and Target columns 1. The Type will indicate the kind of action being performed. If the Type suggests the execution of an executable or script stored in the Binary table, the value in the Source column serves as a key to locate the corresponding entry in the Binary table (using the Name column) 1. The Data column of the Binary table will then contain the actual binary data, which can be extracted for further scrutiny 1. If the Type indicates the execution of a file installed as part of the package, the Source column will hold a key referencing the File table 1. Using this key, the analyst can retrieve the file's details from the File table. The Component column in the File table then links to the Component table, and finally, the Directory column of the Component table provides the identifier for the installation path, which can be resolved using the Directory table 1. In cases where the Type involves script execution, the script code might be found in the Binary table (referenced by Source) or directly embedded within the Target column 1. By effectively correlating the CustomAction table with the Binary, File, and Directory tables, analysts can ascertain what code is being executed, its origin (whether embedded or installed), and the destination of any resulting files on the system.
Another practical correlation involves identifying files and their installation locations. To determine which files are associated with a particular feature and where they will be placed on the system, an analyst would start by examining the Feature table to identify the feature of interest 5. Next, they would use the Feature column in the FeatureComponents table to find all the Components that are part of that feature 1. For each identified Component, its identifier is then used to look up corresponding entries in the File table (using the Component column) to list the associated files 1. Finally, for each Component, the Directory column provides the identifier for the target directory in the Directory table. By examining the DefaultDir and Directory_Parent columns in the Directory table, the analyst can reconstruct the full installation path for the files 1. This process enables analysts to understand the relationship between application features and the files they install, as well as the intended installation paths. Any deviations from expected locations or the presence of unexpected files within a component associated with a specific feature could signify malicious activity.
Furthermore, analysts can link file operations to registry or service changes by focusing on individual components. Starting with a Component in the Component table 5, the analyst can use its identifier to find associated files in the File table 6. The same Component identifier can also be used to check for related entries in the Registry table, revealing any registry modifications associated with that component 1. Similarly, the ServiceInstall table can be examined for services that might be installed or managed by the same component, often identified by service names or executable paths that correspond to files within the component 9. By examining all tables associated with a particular component, a comprehensive view of its installation process emerges, including file operations, registry modifications, and service installations. This holistic approach helps in identifying components that perform actions beyond their expected scope, potentially indicating malicious intent.
4. Analyzing the Order of Execution for Malware Identification
The InstallExecuteSequence table serves as the operational blueprint for the installation process, and its in-depth examination is crucial for discerning the intended order of events 1. The Sequence column within this table is paramount, as it dictates the order in which actions are performed, with lower numerical values indicating earlier execution. Analysts should pay close attention to the sequencing of standard actions, such as InstallFiles (responsible for copying files), WriteRegistryValues (which modifies the system registry), and CreateShortcuts (used for generating application shortcuts) 1. The order of these standard actions typically follows a logical progression in legitimate installers. Of particular importance is the placement of CustomAction entries within this sequence 1. Malware often introduces its malicious functionalities through custom actions, making their timing within the overall installation sequence highly significant 1. For instance, a custom action that is scheduled to execute very early in the installation process, even before essential files have been installed, could be indicative of an attempt to manipulate the installation process or compromise the system at a preliminary stage.
The actions listed in the InstallExecuteSequence table are executed sequentially based on the ascending order of their Sequence numbers 14. The Condition column associated with each action provides a logical expression that determines whether that specific action will be executed 1. If the condition evaluates to True, the action is performed; otherwise, it is skipped. Understanding the syntax and logic of these conditional statements is therefore essential for accurate analysis 14. Malicious actors can strategically employ conditions to ensure their harmful actions are only triggered under specific circumstances, thereby making their behavior more targeted and potentially evading detection in generic analysis environments that do not meet those specific criteria 14.
CustomAction entries within the InstallExecuteSequence table are executed according to their assigned Sequence numbers, just like standard actions 1. The Action column in the InstallExecuteSequence table contains the name of the custom action, which directly corresponds to an entry in the Action column of the CustomAction table 14. To reconstruct the step-by-step execution of custom actions, analysts should filter the InstallExecuteSequence table to identify rows where the Action value matches an entry in the CustomAction table. These identified rows should then be ordered based on their Sequence number. Finally, for each custom action in this ordered list, its details, including Type, Source, and Target, should be examined in the CustomAction table to fully understand its intended function 1. This meticulous process allows for the precise determination of the order in which custom actions are executed, which is often critical for unraveling the sequence of potentially malicious operations orchestrated by the installer.
A crucial distinction exists between immediate and deferred custom actions. Immediate custom actions are executed synchronously during the initial phase of the installation process, typically operating with the privileges of the user who initiated the installation 38. As a general guideline, immediate actions should not make permanent modifications to the system, as these changes are often difficult to revert in case of installation failure 38. Conversely, deferred custom actions are executed later in the installation process, specifically during the "execution" phase when the system state is being altered. These actions run under the context of the Windows Installer service, which frequently possesses elevated system privileges, especially if the installer was launched with administrative rights 38. Consequently, deferred actions are commonly employed to make system-level changes 38. Malware often exploits deferred custom actions for malicious purposes due to their ability to operate with higher privileges and as part of the main installation script 9. Unlike immediate actions, deferred custom actions do not have direct access to installer session properties in the conventional manner; instead, they often rely on the CustomActionData property to receive data and parameters that were set during the immediate phase 39. The use of CustomActionData by deferred actions implies that the actual parameters or data utilized by a potentially malicious action might not be directly visible within the Target column of the CustomAction table. Understanding how this property is populated, often by examining preceding immediate custom actions or the command-line arguments used to launch the MSI installer, requires further analysis 39. This distinction between immediate and deferred custom actions is therefore vital for malware analysis, as deferred actions, with their potential for elevated privileges, are more likely to be involved in performing system-level malicious operations, warranting closer scrutiny within the InstallExecuteSequence.
5. Use Cases for Malware Analysis
Malware analysts can leverage the detailed understanding of MSI file structure and table relationships to identify various indicators of malicious activity. Examining the CustomAction table for specific types and configurations can reveal suspicious behaviors. For instance, custom actions designed to execute external executables (Types 2, 18, 34, 50) are noteworthy, particularly if the executable is sourced from the Binary table (Type 2), as this often indicates an embedded malicious payload 32. Similarly, custom actions that run scripts (Types 5, 6, 21, 22, 37, 38, 53, 54) should be closely examined, as these can execute arbitrary code on the system 32. The Target column of custom actions should be analyzed for suspicious command-line arguments or embedded script code that might attempt to download files, execute system utilities in an unusual manner, or modify system settings 1. Analysts should also be alert for custom actions with the "no impersonation" flag set, as these run with the elevated privileges of the Windows Installer service 9.
Analyzing file operations can also uncover malicious intent. The File and Directory tables should be examined to identify files being installed in sensitive system directories (e.g., C:\Windows\, C:\Windows\System32\) or user profile directories (e.g., C:\Users\<User>\AppData\) without a clear and legitimate reason 9. Suspicious filenames or extensions (e.g., executables with random names, script files in unexpected locations) should raise red flags. Correlating the File table with the RemoveFile table can reveal if the installer attempts to remove files associated with security software 8.
Suspicious modifications to the Windows Registry, as detailed in the Registry table, are another key indicator. Analysts should look for additions or modifications to the Run keys (HKLM\Software\Microsoft\Windows\CurrentVersion\Run, HKCU\Software\Microsoft\Windows\CurrentVersion\Run) for establishing persistence 1. Modifications to security-related registry keys or registry entries being created or modified by custom actions also warrant investigation.
The ServiceInstall table should be reviewed for the installation of unexpected or malicious services 35. Services with unusual names, display names, or descriptions, especially those configured to start automatically under the LocalSystem account, should be treated with suspicion 9. The Arguments column might also contain clues about the service's true purpose.
Techniques like DLL sideloading or hijacking can be identified by analyzing the File table for the installation of DLL files in application directories or system directories 1. Correlating these file operations with registry modifications that alter the system's DLL search order can further support this identification.
Several tools are invaluable for MSI file analysis. msitools (including msiinfo and msidump) on Linux allows for table and stream enumeration and data extraction 1. lessmsi provides both a GUI and command-line interface for viewing and extracting MSI contents 1. Orca, a Microsoft tool, enables in-depth analysis and editing of MSI files 1. msidiff can compare MSI files to highlight changes 1. General archiving tools like 7-Zip can view internal files and streams 12, and msidump by Mgeeky offers specialized features for malware analysis, including YARA scanning 1.
Comparing a suspected malicious MSI file with a known clean version using tools like msidiff can quickly highlight any added or modified actions, files, registry entries, etc., making it easier to pinpoint malicious components 1.








Malware Action
	Relevant MSI Tables
	Persistence
	Registry, ServiceInstall, InstallExecuteSequence (for scheduled tasks via custom actions)
	File Dropping
	File, Directory, InstallExecuteSequence (via custom actions)
	Privilege Escalation
	CustomAction (Type with no impersonation), ServiceInstall (running as LocalSystem)
	Command and Control
	CustomAction (executing network commands), File (dropping network tools)
	Disabling Security Features
	Registry, InstallExecuteSequence (modifying security settings via custom actions)
	Data Exfiltration
	CustomAction (executing tools for data transfer), File (staging data)
	6. Conclusion and Recommendations
In summary, a comprehensive understanding of the MSI file format, particularly the structure and interrelationships of its tables, is essential for the effective analysis of these installers for malicious content. Key tables such as InstallExecuteSequence, CustomAction, File, Directory, Binary, Registry, and ServiceInstall provide critical insights into the actions an installer will perform on a system. The order of execution, especially concerning custom actions, and the conditions under which these actions are triggered are of paramount importance in identifying potentially harmful behavior.
For malware analysts tasked with examining MSI files, the following recommendations are provided:
* Always begin by thoroughly analyzing the InstallExecuteSequence and AdminExecuteSequence tables to gain a high-level understanding of the installation flow and to identify the presence and order of any custom actions within the sequence.
* Conduct a detailed examination of the CustomAction table, paying close attention to the Type, Source, and Target columns for each entry. Look for custom actions with types commonly associated with malicious activity, such as those that execute external binaries or run scripts. Investigate the source of the code or data being executed and scrutinize the target for any suspicious commands or embedded scripts.
* Establish correlations between entries across different MSI tables to develop a holistic view of the installer's actions. For example, trace a custom action back to the specific binary or file it executes, and then determine the installation location of that file by examining the Directory table.
* Exercise particular caution when analyzing deferred custom actions, as these often operate with elevated system privileges and can perform significant modifications to the system. Investigate how the CustomActionData property is utilized by these actions to understand the parameters being passed.
* Become proficient in the use of various MSI analysis tools, including both open-source and commercially available options, to facilitate the extraction and examination of data contained within the MSI file. These tools can significantly aid in navigating the complex structure of the MSI database.
* Whenever feasible, compare suspected malicious MSI files with known clean versions of the same software. This comparative analysis can quickly highlight any discrepancies or additions that might indicate the presence of malware.
* Maintain awareness of common malware techniques that are frequently employed within MSI files, such as dropping executables in unusual or hidden locations, establishing persistence through modifications to the registry or the installation of malicious services, and exploiting DLL loading mechanisms for code execution.
Continued research into the evolving tactics of malware distributed via MSI files and the active sharing of analysis techniques within the cybersecurity community are crucial for maintaining an effective defense against these threats.
Works cited
1. How to Analyze Malicious MSI Installer Files - Intezer, accessed March 17, 2025, https://intezer.com/blog/incident-response/how-to-analyze-malicious-msi-installer-files/
2. Introduction to Windows Installer, accessed March 17, 2025, https://docs.revenera.com/installshield26helplib/helplibrary/IHelpIntroWi.htm
3. Database Tables - Windows Installer - Documentation & Help, accessed March 17, 2025, https://documentation.help/Windows-Installer/database_tables.htm
4. Database Tables - Win32 apps | Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/database-tables
5. MSI Introduction to Tables: - Lara Online Training, accessed March 17, 2025, https://laraonlinetraining.com/msi-introduction-to-tables/
6. MSI Package Definition and Resources - Advanced Installer, accessed March 17, 2025, https://www.advancedinstaller.com/application-packaging-training/msi/ebook/definition-structure.html
7. Types of Packages: Microsoft Windows Installer (MSI) - PACE Suite, accessed March 17, 2025, https://pacesuite.com/blog/types-of-packages-non-virtual-packages-microsoft-windows-installer-msi
8. Understanding Files in Application Packaging - MSI Packaging ebook - Advanced Installer, accessed March 17, 2025, https://www.advancedinstaller.com/application-packaging-training/msi/ebook/files.html
9. Threat Analysis: MSI - Masquerading as a Software Installer - Cybereason, accessed March 17, 2025, https://www.cybereason.com/blog/threat-analysis-msi-masquerading-as-software-installer
10. A Summary of the Security Risks Associated with MSI Installers - appCURE, accessed March 17, 2025, https://www.appcure.io/a-summary-of-the-security-risks-associated-with-msi-installers/
11. Stealthy Malicious MSI Loader - Overlapping Technique and Infrastructure with BatLoader, accessed March 17, 2025, https://www.cyfirma.com/research/stealthy-malicious-msi-loader-overlapping-technique-and-infrastructure-with-batloader/
12. Malware Delivered via Windows Installer Files - SANS Internet Storm Center, accessed March 17, 2025, https://isc.sans.edu/diary/23349
13. Automated Malware Analysis Report for VisualSVN-Server-5.3.2-x64.msi - Generated by Joe Sandbox, accessed March 17, 2025, https://www.joesandbox.com/analysis/1509636/0/html
14. InstallExecuteSequence Table - Win32 apps - Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/installexecutesequence-table
15. InstallExecuteSequence Table - Windows Installer Documentation, accessed March 17, 2025, https://documentation.help/Windows-Installer/installexecutesequence_table.htm
16. Importing the InstallExecuteSequence - Win32 apps | Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/importing-the-installexecutesequence
17. win32/desktop-src/Msi/moduleinstallexecutesequence-table.md at docs - GitHub, accessed March 17, 2025, https://github.com/MicrosoftDocs/win32/blob/docs/desktop-src/Msi/moduleinstallexecutesequence-table.md
18. InstallExecuteSequence element | Docs, accessed March 17, 2025, https://docs.firegiant.com/wix/schema/wxs/installexecutesequence/
19. AdminExecuteSequence Table - Win32 apps - Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/adminexecutesequence-table
20. AdminExecuteSequence Table - Windows Installer Documentation, accessed March 17, 2025, https://documentation.help/Windows-Installer/adminexecutesequence_table.htm
21. win32/desktop-src/Msi/authoring-merge-module-sequence-tables.md at docs - GitHub, accessed March 17, 2025, https://github.com/MicrosoftDocs/win32/blob/docs/desktop-src/Msi/authoring-merge-module-sequence-tables.md
22. AdminExecuteSequence Element | Docs, accessed March 17, 2025, https://docs.firegiant.com/wix3/xsd/wix/adminexecutesequence/
23. AdminExecuteSequence element - WiX Toolset, accessed March 17, 2025, https://wixtoolset.org/docs/schema/wxs/adminexecutesequence/
24. CustomAction Table - Windows Installer - Documentation & Help, accessed March 17, 2025, https://documentation.help/Windows-Installer/customaction_table.htm
25. CustomAction Element | Docs, accessed March 17, 2025, https://docs.firegiant.com/wix3/xsd/wix/customaction/
26. CustomAction element | Docs, accessed March 17, 2025, https://docs.firegiant.com/wix/schema/wxs/customaction/
27. CustomAction Table - Win32 apps | Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/customaction-table
28. Enabling CustomAction table in msi - Stack Overflow, accessed March 17, 2025, https://stackoverflow.com/questions/35548931/enabling-customaction-table-in-msi
29. .msi malware analysis – RvsEc0n - WordPress.com, accessed March 17, 2025, https://rvsec0n.wordpress.com/2020/02/22/msi-malware-analysis/
30. Custom Action Type Overview, accessed March 17, 2025, https://docs.revenera.com/installshield22helplib/helplibrary/IHelpDLLFunctionCalcType.htm
31. Custom Action Types, accessed March 17, 2025, https://docs.revenera.com/installshield28helplib/helplibrary/CATypes.htm
32. Custom Action Types - Windows Installer - Documentation & Help, accessed March 17, 2025, https://documentation.help/Windows-Installer/summary_list_of_all_custom_action_types.htm
33. win32/desktop-src/Msi/file-tables-group.md at docs - GitHub, accessed March 17, 2025, https://github.com/MicrosoftDocs/win32/blob/docs/desktop-src/Msi/file-tables-group.md
34. Malware Analysis — citacionpoderjudicl.msi (Mekotio) | by Miguel Méndez Z. | Medium, accessed March 17, 2025, https://medium.com/@s1kr10s/malware-analysis-citacionpoderjudicl-msi-mekotio-34c231eb9c63
35. ServiceInstall Table - Win32 apps | Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/serviceinstall-table
36. About Properties(Windows Installer) - MSI Packaging ebook, accessed March 17, 2025, https://www.advancedinstaller.com/application-packaging-training/msi/ebook/properties.html
37. Replace a file from MSI - windows installer - Stack Overflow, accessed March 17, 2025, https://stackoverflow.com/questions/4398042/replace-a-file-from-msi
38. Windows Installer Custom Actions, accessed March 17, 2025, https://www.advancedinstaller.com/user-guide/custom-actions.html
39. Tip: MSI Properties and Deferred Execution - Flexera, accessed March 17, 2025, https://resources.flexera.com/web/media/documents/CustomActionData.pdf
40. Understanding Windows Installer (MSI) Custom Action Contexts - Revenera, accessed March 17, 2025, https://www.revenera.com/blog/software-installation/just-be-yourself-understanding-windows-installer-msi-custom-action-contexts/
41. Don't Do It: Use Immediate CustomAction For Changing The System State, accessed March 17, 2025, https://www.advancedinstaller.com/immediate-vs-deferred-custom-action.html
42. Deferred Execution Custom Actions - Win32 apps - Microsoft Learn, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/deferred-execution-custom-actions
43. How to Use CustomActionData to Access Windows Installer Properties in Deferred CustomActions, accessed March 17, 2025, https://www.advancedinstaller.com/access-installer-properties-using-custom-action-data.html
44. How to access installer properties from deferred custom actions, accessed March 17, 2025, https://www.advancedinstaller.com/user-guide/qa-access-property-deferred-action.html
45. Obtaining Context Information for Deferred Execution Custom Actions - Win32 apps, accessed March 17, 2025, https://learn.microsoft.com/en-us/windows/win32/msi/obtaining-context-information-for-deferred-execution-custom-actions
46. mgeeky/msidump: MSI Dump - a tool that analyzes malicious MSI installation packages, extracts files, streams, binary data and incorporates YARA scanner. - GitHub, accessed March 17, 2025, https://github.com/mgeeky/msidump
47. How Maze abuse legitimate installer to trick your defense? - Nucleon Security, accessed March 17, 2025, https://nucleon-security.com/security-insights/how-maze-abuse-legitimate-installer-to-trick-your-defense/